{"version":3,"sources":["cards.js","components/Wrapper/Wrapper.js","components/Container/Container.js","components/Navbar/Navbar.js","components/Col/Col.js","components/Row/Row.js","components/Card/Card.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["cards","url","name","id","Wrapper","props","react_default","a","createElement","children","Container","className","Navbar","components_Container_Container","href","score","highScore","Col","Row","Card","src","alt","onClick","handleClickEvent","Jumbotron","started","correctGuess","App","state","clickedCards","incorrectGuess","_this","setState","event","target","newClickedArr","shuffled","map","Math","random","sort","b","found","find","cardID","length","push","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_Row_Row","card","components_Col_Col","key","components_Card_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27aa8ae5.chunk.js","sourcesContent":["const cards = [\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/a/a6/Icon-Brigitte.png?version=17ba5f64d520c25215dc33d99a7ec64d',\n    name: 'Brigitte',\n    id: 1\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/2/29/Icon-Pharah.png?version=52b2a41771e856eb9678a34440fcacba',\n    name: 'Pharah',\n    id: 2\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/0/03/Icon-Mercy.png?version=098dede78f44673e0ec3148940dc60de',\n    name: 'Mercy',\n    id: 3\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/5/59/Icon-McCree.png?version=64025caeb2d5af48cf681cfcc1f8bec4',\n    name: 'McCree',\n    id: 4\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/7/71/Icon-Hanzo.png?version=4717c921d74198a90c9763666378c874',\n    name: 'Hanzo',\n    id: 5\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/f/f7/Icon-Zenyatta.png?version=ffaacf7a68d15487fdd6cd78feb4361a',\n    name: 'Zenyatta',\n    id: 6\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/c/ca/Icon-Wrecking_Ball.png?version=47d9db4d921ed1853cdb0c48fdf66128',\n    name: 'Wrecking Ball',\n    id: 7\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/2/29/Icon-Tracer.png?version=dc87e8e0b2dc7555d996077f1af129f0',\n    name: 'Tracer',\n    id: 8\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/1/16/Icon-Roadhog.png?version=e11b2752a4d023be3a96bf418ec4359a',\n    name: 'Roadhog',\n    id: 9\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/2/2b/Icon-Soldier_76.png?version=688c44ad42c409eb787cbbdc94a03f5d',\n    name: 'Soldier 76',\n    id: 10\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/c/ca/Icon-Torbj%C3%B6rn.png?version=f6d64fe34e9a3af7acbb6db822441d01',\n    name: 'TorbjÃ¶rn',\n    id: 11\n  },\n  {\n    url:\n      'https://d1u5p3l4wpay3k.cloudfront.net/overwatch_gamepedia/7/70/Icon-Sombra.png?version=38912cd650cba13e8c66f1ca9e9870e1',\n    name: 'Sombra',\n    id: 12\n  }\n];\n\nexport default cards;","import React from 'react';\n\nconst Wrapper = props => (\n  <div>\n    {props.children}\n  </div>\n);\n\nexport default Wrapper;","import React from 'react';\n\nconst Container = props => (\n  <div className='container'>\n    {props.children}\n  </div>\n);\n\nexport default Container;","import React from 'react';\nimport Container from '../Container';\n\nconst Navbar = props => (\n  <nav className='navbar navbar-light bg-light'>\n    <Container>\n      <a className='navbar-brand' href='/'>Clickygame</a>\n      <h4>Score: {props.score} | Highscore: {props.highScore}</h4>\n    </Container>\n  </nav>\n);\n\nexport default Navbar;","import React from 'react';\n\nconst Col = props => (\n  <div className='col-sm-3 d-flex justify-content-center'>\n    {props.children}\n  </div>\n);\n\nexport default Col;","import React from 'react';\n\nconst Row = props => (\n  <div className='row'>\n    {props.children}\n  </div>\n);\n\nexport default Row;","import React from 'react';\nimport './Card.css';\n\nconst Card = props => (\n  <div className=\"card mb-4\">\n    <img\n      className=\"card-img\"\n      id={props.id}\n      src={props.url}\n      alt={props.name}\n      onClick={props.handleClickEvent}\n    />\n  </div>\n);\n\nexport default Card;","import React from 'react';\nimport Container from '../Container';\n\nconst Jumbotron = props => (\n  <div className='jumbotron jumbotron-fluid text-center'>\n    <Container>\n      {\n        (!props.started)\n          ? <h2 className='display-3'>Click an image!</h2>\n          : (props.correctGuess)\n          ? <h2 className='display-3 alert-success'>Correct!</h2>\n          : <h2 className='display-3 alert-danger'>Try again!</h2>\n      }\n      <p className='lead'>Try to click all of the images without clicking the same one twice!</p>\n    </Container>\n  </div>\n);\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport cards from './cards';\nimport Wrapper from './components/Wrapper';\nimport Navbar from './components/Navbar';\nimport Container from './components/Container';\nimport Col from './components/Col';\nimport Row from './components/Row';\nimport Card from './components/Card';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highScore: 0,\n    clickedCards: [],\n    correctGuess: true,\n    started: false\n  };\n\n  incorrectGuess = () => {\n    const score = this.state.score;\n    const highScore = this.state.highScore;\n\n    this.setState({\n      score: 0,\n      highScore: (score <= highScore) ? highScore : score,\n      clickedCards: [],\n      correctGuess: false\n    });\n  };\n\n  handleClickEvent = event => {\n    const { id } = event.target;\n    const newClickedArr = this.state.clickedCards;\n    const shuffled = this.state.cards\n      .map(a => [Math.random(), a])\n      .sort((a, b) => a[0] - b[0])\n      .map(a => a[1]);\n    const found = newClickedArr.find(cardID => cardID === id);\n\n    if (newClickedArr.length && found) {\n      this.incorrectGuess();\n    } else {\n      newClickedArr.push(id);\n      this.setState({\n        cards: shuffled,\n        clickedCards: newClickedArr,\n        score: this.state.score + 1,\n        correctGuess: true,\n        started: true\n      });\n    }\n  };\n  \n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\n        <Jumbotron\n          correctGuess={this.state.correctGuess}\n          started={this.state.started}\n        />\n        <Container>\n          <Row>\n            {this.state.cards.map(card => (\n              <Col key={card.id}>\n                <Card\n                  handleClickEvent={this.handleClickEvent}\n                  id={card.id}\n                  key={card.id}\n                  url={card.url}\n                  alt={card.name}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}